name: Deploy to EKS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Build and Deploy to EKS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      # Set AWS Environment Variables using export
      - name: Set AWS Environment Variables
        run: |
          echo "Exporting AWS environment variables..."
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_SESSION_TOKEN="${{ secrets.AWS_SESSION_TOKEN }}"
          export AWS_REGION="${{ secrets.AWS_REGION }}"

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: false
          registry-type: private
          skip-logout: false

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Set Up kubectl
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Deploy MySQL to EKS
        run: |
          kubectl apply -f monolith-k8s/monolith-mysql.yaml

      - name: Deploy Application to EKS
        run: |
          sed -i "s|image: monolith:latest|image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" monolith-k8s/monolith-deployment.yaml
          kubectl apply -f monolith-k8s/monolith-deployment.yaml
          kubectl apply -f monolith-k8s/monolith-service.yaml

      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/monolith
          kubectl get pods
          kubectl get services
